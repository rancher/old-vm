apiVersion: v1
kind: Namespace
metadata:
  name: ranchervm-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ranchervm-service-account
  namespace: ranchervm-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ranchervm-role
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - "*"
- apiGroups: ["", "batch"]
  resources: ["pods", "nodes", "services", "jobs", "endpoints", "persistentvolumes", "persistentvolumeclaims"]
  verbs: ["*"]
- apiGroups: ["vm.rancher.io"]
  resources: ["virtualmachines", "arptables", "credentials", "settings", "machineimages"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: ranchervm-bind
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ranchervm-role
subjects:
- kind: ServiceAccount
  name: ranchervm-service-account
  namespace: ranchervm-system
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    ranchervm-system: VirtualMachine
  name: virtualmachines.vm.rancher.io
spec:
  group: vm.rancher.io
  version: v1alpha1
  names:
    kind: VirtualMachine
    listKind: VirtualMachineList
    plural: virtualmachines
    shortNames:
    - vm
    - vms
    singular: virtualmachine
  scope: Cluster
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    ranchervm-system: ARPTable
  name: arptables.vm.rancher.io
spec:
  group: vm.rancher.io
  version: v1alpha1
  names:
    kind: ARPTable
    listKind: ARPTableList
    plural: arptables
    shortNames:
    - arp
    - arps
    singular: arptable
  scope: Cluster
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    ranchervm-system: Credential
  name: credentials.vm.rancher.io
spec:
  group: vm.rancher.io
  version: v1alpha1
  names:
    kind: Credential
    listKind: CredentialList
    plural: credentials
    shortNames:
    - cred
    - creds
    singular: credential
  scope: Cluster
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    ranchervm-system: Setting
  name: settings.vm.rancher.io
spec:
  group: vm.rancher.io
  version: v1alpha1
  names:
    kind: Setting
    listKind: SettingList
    plural: settings
    singular: setting
  scope: Cluster
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    ranchervm-system: MachineImage
  name: machineimages.vm.rancher.io
spec:
  group: vm.rancher.io
  version: v1alpha1
  names:
    kind: MachineImage
    listKind: MachineImageList
    plural: machineimages
    shortNames:
    - img
    - imgs
    singular: machineimage
  scope: Cluster
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: vm-controller
  namespace: ranchervm-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: vm-controller
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["vm-controller"]
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: vm-controller
        image: rancher/vm:v0.2.0
        imagePullPolicy: Always
        args:
        - -vm
        - -bridge-iface=ens33
        - -v=3
        - -image-novnc=rancher/vm-novnc:v0.2.0
        - -image-tools=rancher/vm-tools:v0.2.0
        - -image-vm=rancher/vm:v0.2.0
      serviceAccountName: ranchervm-service-account
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: ip-controller
  namespace: ranchervm-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: ip-controller
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["ip-controller"]
            topologyKey: "kubernetes.io/hostname"
      hostNetwork: true
      containers:
      - name: ip-controller
        image: rancher/vm:v0.2.0
        imagePullPolicy: Always
        command: [ "sh", "-c"]
        args:
        - exec /ranchervm -ip -devicename br0 -v 3
      - name: arp-scanner
        image: rancher/vm:v0.2.0
        imagePullPolicy: Always
        command: [ "bash", "-c"]
        # This is probably too aggressive for anything bigger than class 3 network
        args:
        - while true; do
            iface=br0;
            inet_addr=$(ifconfig $iface | grep "inet " | awk '{print $2}' | cut -d':' -f2);
            inet_mask=$(ifconfig $iface | grep "inet " | awk '{print $4}' | cut -d':' -f2);
            ips="$(arp-scan -interface=$iface $inet_addr:$inet_mask | awk -F'\t' '$2 ~ /[0-9a-f][0-9a-f]:/ {print $1}')";
            for ip in $ips; do
              ping -c 1 -t 1 $ip &>/dev/null &
            done;
            sleep 5;
          done
      serviceAccountName: ranchervm-service-account
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: backend
  namespace: ranchervm-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: backend
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["backend"]
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: backend
        image: rancher/vm:v0.2.0
        imagePullPolicy: Always
        args:
        - -backend
      serviceAccountName: ranchervm-service-account
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: ranchervm-system
spec:
  ports:
  - name: api
    port: 9500
  selector:
    app: backend
  type: ClusterIP
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: frontend
  namespace: ranchervm-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: frontend
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["frontend"]
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: frontend
        image: rancher/vm-frontend:v0.2.0
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: ranchervm-system
spec:
  ports:
  - name: ui
    port: 80
    targetPort: 8000
  selector:
    app: frontend
  type: LoadBalancer
